{"version":3,"file":"static/js/75.12589cc4.chunk.js","mappings":"uQAyIA,UArHkB,WAChB,OAA0BA,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KACA,GAA4CC,EAAAA,EAAAA,MAA5C,eAAOC,EAAP,YAAoBC,EAApB,EAAoBA,UAAWC,EAA/B,EAA+BA,SAC/BC,EAAAA,EAAAA,YAAU,WACRD,GAAWE,EAAAA,GAAAA,MAAY,4BACxB,GAAE,CAACH,EAAWC,IAEf,IAAMG,EAAoB,SAAC,GAAwC,IAAD,IAArCC,cAAiBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MAClD,OAAQD,GACN,IAAK,QACHX,EAASY,GACT,MACF,IAAK,WACHV,EAAYU,GACZ,MACF,QACE,OAEL,EAYGC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAMf,OACE,UAAC,KAAD,CACEC,KAAM,QACNC,MAAO,SACPC,QAAS,SACTC,gBAAe,cAASC,EAAT,KACfC,eAAgB,QAChBC,mBAAoB,gBANtB,UAQGlB,IAAa,SAAC,KAAD,CAAUmB,GAAG,YAAYC,SAAS,KAEhD,UAAC,KAAD,CAAOC,QAAS,EAAGC,GAAI,OAAQC,KAAM,KAAMC,GAAI,GAAIC,GAAI,EAAvD,WACE,SAAC,KAAD,CAAOZ,MAAO,SAAd,UACE,SAAC,KAAD,CAASa,SAAU,MAAOC,MAAO,QAAjC,wCAIF,SAAC,KAAD,CACEC,GAAG,OACHC,QAAS,KACTC,IAAIC,EAAAA,EAAAA,IAAkB,OAAQ,YAC9BC,QAAS,IACTC,UAAW,KACXC,EAAG,EACHC,aAAa,MACbC,SA1Ca,SAAAC,GACnBA,EAAMC,iBACNvC,EAAU,CACRL,MAAOA,EACPE,SAAUA,IAEZD,EAAS,IACTE,EAAY,GACb,EA0BK,UAUE,UAAC,KAAD,CAAOwB,QAAS,EAAhB,WACE,UAAC,KAAD,CAAakB,GAAG,QAAhB,WACE,SAAC,KAAD,CAAWZ,MAAO,QAAlB,4BACA,SAAC,KAAD,CACEa,KAAK,QACLC,QAAQ,2EACRC,UAAQ,EACRC,SAAUvC,EACVE,KAAK,QACLC,MAAOb,EACPiC,MAAO,cAGX,UAAC,KAAD,CAAaY,GAAG,WAAhB,WACE,SAAC,KAAD,CAAWZ,MAAO,QAAlB,uBACA,SAAC,KAAD,CACEa,KAAK,WACLG,SAAUvC,EACVG,MAAOX,EACPU,KAAK,WACLqB,MAAO,cAGX,UAAC,KAAD,CAAON,QAAS,GAAhB,WACE,SAAC,KAAD,CACEuB,UAAUlD,IAASE,EACnB4C,KAAK,SACLV,GAAI,WACJH,MAAO,QACPkB,OAAQ,CACNf,GAAI,YANR,sBAWA,SAAC,KAAD,CACEgB,UAAW,CAAEC,KAAM,SAAUC,GAAI,OACjCnC,MAAO,QACPC,QAAS,SAHX,UAKE,SAAC,KAAD,CAAQ0B,KAAK,SAASS,QAvErB,WAAO,IAAD,EACnBzC,GAAiB,OAARE,QAAQ,IAARA,GAAA,UAAAA,EAAUwC,aAAV,eAAiBC,OAAQ,IACnC,EAqEa,mCAUf,C","sources":["pages/SignInPage/SignInPage.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { Navigate, useNavigate, useLocation } from 'react-router-dom';\n\nimport { useUserLoginMutation } from 'redux/api/AuthApi';\n\nimport {\n  Flex,\n  Box,\n  FormControl,\n  FormLabel,\n  Input,\n  Stack,\n  Button,\n  Heading,\n  useColorModeValue,\n} from '@chakra-ui/react';\nimport { toast } from 'react-toastify';\n\nimport Image from '../../image/dark-macbook.png';\n\nconst LoginView = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [userLogin, { isSuccess, isError }] = useUserLoginMutation();\n  useEffect(() => {\n    isError && toast.error('Invalid email or password');\n  }, [isSuccess, isError]);\n\n  const handleInputChange = ({ currentTarget: { name, value } }) => {\n    switch (name) {\n      case 'email':\n        setEmail(value);\n        break;\n      case 'password':\n        setPassword(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    userLogin({\n      email: email,\n      password: password,\n    });\n    setEmail('');\n    setPassword('');\n  };\n\n  let navigate = useNavigate();\n  let location = useLocation();\n\n  const goBack = () => {\n    navigate(location?.state?.from || '/');\n  };\n\n  return (\n    <Flex\n      minH={'100vh'}\n      align={'center'}\n      justify={'center'}\n      backgroundImage={`url(${Image})`}\n      backgroundSize={'cover'}\n      backgroundPosition={'center center'}\n    >\n      {isSuccess && <Navigate to=\"/contacts\" replace={true} />}\n\n      <Stack spacing={8} mx={'auto'} maxW={'lg'} py={12} px={6}>\n        <Stack align={'center'}>\n          <Heading fontSize={'4xl'} color={'white'}>\n            Sign in to your account\n          </Heading>\n        </Stack>\n        <Box\n          as=\"form\"\n          rounded={'lg'}\n          bg={useColorModeValue('grey', 'gray.700')}\n          opacity={0.75}\n          boxShadow={'lg'}\n          p={8}\n          autoComplete=\"off\"\n          onSubmit={handleSubmit}\n        >\n          <Stack spacing={4}>\n            <FormControl id=\"email\">\n              <FormLabel color={'white'}>Email address</FormLabel>\n              <Input\n                type=\"email\"\n                pattern=\"^([a-z0-9_-]+\\.)*[a-z0-9_-]+@[a-z0-9_-]+(\\.[a-z0-9_-]+)*\\.[a-z]{2,6}$\"\n                required\n                onChange={handleInputChange}\n                name=\"email\"\n                value={email}\n                color={'white'}\n              />\n            </FormControl>\n            <FormControl id=\"password\">\n              <FormLabel color={'white'}>Password</FormLabel>\n              <Input\n                type=\"password\"\n                onChange={handleInputChange}\n                value={password}\n                name=\"password\"\n                color={'white'}\n              />\n            </FormControl>\n            <Stack spacing={10}>\n              <Button\n                disabled={email && password ? false : true}\n                type=\"submit\"\n                bg={'blue.700'}\n                color={'white'}\n                _hover={{\n                  bg: 'blue.500',\n                }}\n              >\n                Sign in\n              </Button>\n              <Stack\n                direction={{ base: 'column', sm: 'row' }}\n                align={'start'}\n                justify={'center'}\n              >\n                <Button type=\"button\" onClick={goBack}>\n                  goBack\n                </Button>\n              </Stack>\n            </Stack>\n          </Stack>\n        </Box>\n      </Stack>\n    </Flex>\n  );\n};\n\nexport default LoginView;\n"],"names":["useState","email","setEmail","password","setPassword","useUserLoginMutation","userLogin","isSuccess","isError","useEffect","toast","handleInputChange","currentTarget","name","value","navigate","useNavigate","location","useLocation","minH","align","justify","backgroundImage","Image","backgroundSize","backgroundPosition","to","replace","spacing","mx","maxW","py","px","fontSize","color","as","rounded","bg","useColorModeValue","opacity","boxShadow","p","autoComplete","onSubmit","event","preventDefault","id","type","pattern","required","onChange","disabled","_hover","direction","base","sm","onClick","state","from"],"sourceRoot":""}